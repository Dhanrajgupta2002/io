EXP 1 : Understanding the connectivity of Raspberry Pi/ Beagle board circuit with IR sensor.
Write an application to detect obstacle and notify user using LEDs.





int IRSensor = 9; // connect ir sensor module to Arduino pin 9


int LED = 13; // conect LED to Arduino pin 13


void setup()


{


  Serial.begin(921600); 


  Serial.println("Serial Working"); 


  pinMode(IRSensor, INPUT); // IR Sensor pin INPUT


  pinMode(LED, OUTPUT); // LED Pin Output


}


 


void loop()


{


  int sensorStatus = digitalRead(IRSensor); // Set the GPIO as Input


 


  if (sensorStatus == 1) // Check if the pin high or not


  {


    // if the pin is high turn off the onboard Led


    digitalWrite(LED, LOW); // LED LOW


    Serial.println("Motion Ended!"); // print Motion Detected! on the serial monitor window


  }


  else


  {


    //else turn on the onboard LED


    digitalWrite(LED, HIGH); // LED High


    Serial.println("Motion Detected!"); // print Motion Ended! on the serial monitor window


  }


}

<===========================================================================================================================================================================================================================================================================================================>

exp 2 : Understanding the connectivity of Raspberry-Pi /Beagle board circuit with temperature sensor. 
Write an application to read the environment temperature. 
If temperature crosses a threshold value, the application indicated user using LEDSs


// 

#include <DHT.h>

#define DHTPIN 2
#define DHTTYPE DHT11   // DHT 11 sensor

// Define LED pin
#define LED_PIN 13  // Use built-in LED on Arduino Uno (pin 13)

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  dht.begin();
  
  pinMode(LED_PIN, OUTPUT);  // Initialize LED pin as an output
}

void loop() {
  delay(2000); // Wait for sensor to stabilize

  // Read humidity and temperature
  float humidity = dht.readHumidity();
  float temperature = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(humidity) || isnan(temperature)) {
    Serial.println("Failed to read from DHT sensor!");
    return;
  }

  // Print humidity and temperature to Serial Monitor
  Serial.print("Humidity: ");
  Serial.print(humidity);
  Serial.print(" %\t");

  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.println(" °C");

  // Check if temperature exceeds 26°C
  if (temperature > 27.0) {
    digitalWrite(LED_PIN, HIGH);  // Turn on the LED
  } else {
    digitalWrite(LED_PIN, LOW);   // Turn off the LED
  }
}

<===========================================================================================================================================================================================================================================================================================================>

exp 3





import RPi.GPIO as GPIO
import time

sensor = 16
buzzer = 18

GPIO.setmode(GPIO.BOARD)
GPIO.setup(sensor,GPIO.IN)
GPIO.setup(buzzer,GPIO.OUT)

GPIO.output(buzzer,True)
print "IR Sensor Ready....."
print " "

try: 
   while True:
      if GPIO.input(sensor):
          GPIO.output(buzzer,False)
          print "Object Detected"
          while GPIO.input(sensor):
              time.sleep(0.2)
      else:
          GPIO.output(buzzer,True)


except KeyboardInterrupt:
    GPIO.cleanup()


exp 3 : Understanding and connectivity of Raspberry-Pi /Beagle board with camera. 
Write an application to capture and store the image

# Import the necessary modules
import picamera
from time import sleep

# Create an object for the PiCamera class
camera = picamera.PiCamera()

# Set the camera resolution
camera.resolution = (1024, 768)

# Adjust the camera's brightness level
camera.brightness = 60

# Start the camera preview
camera.start_preview()

# Add an annotation (text) on the previewed image
camera.annotate_text = 'Hi Pi User'

# Keep the preview for 5 seconds before capturing the image
sleep(5)

# Capture the image and save it as 'image1.jpeg'
camera.capture('image1.jpeg')

# Stop the camera preview
camera.stop_preview()

<===========================================================================================================================================================================================================================================================================================================>

Exp 4 : Create a small dashboard application to be deployed on cloud. Different publisher devices can publish their information and interested application can subscribe


part 1 : make a folder VS and inside it make a folder 1.py after that write this code


from flask import Flask, request, jsonify


app = Flask(__name__)


# In-memory storage for simplicity; for production use a database.
data_store = {}


@app.route('/publish', methods=['POST'])
def publish():
    content = request.json
    publisher_id = content.get('publisher_id')
    data = content.get('data')


    if not publisher_id or not data:
        return jsonify({'error': 'Invalid input'}), 400
return jsonify({'status': 'success'}), 200


    data_store[publisher_id] = data
    
@app.route('/subscribe/<publisher_id>', methods=['GET'])
def subscribe(publisher_id):
    data = data_store.get(publisher_id)
    if data is None:
        return jsonify({'error': 'No data found for this publisher'}), 404
    
    return jsonify({'data': data}), 200


if __name__ == '__main__':
    app.run(debug=True)


Part 2 :

make another file in the VS folder with the name index.html



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; }
        #data { margin-top: 20px; }
    </style>
</head>
<body>
    <h1>Dashboard</h1>
    <div>
        <h2>Publish Data</h2>
        <input type="text" id="publisherId" placeholder="Publisher ID" />
        <input type="text" id="data" placeholder="Data" />
        <button onclick="publish()">Publish</button>
    </div>
    <div>
        <h2>Subscribe to Data</h2>
        <input type="text" id="subscribeId" placeholder="Publisher ID" />
        <button onclick="subscribe()">Subscribe</button>
    </div>
    <div id="dataDisplay"></div>


    <script>
        function publish() {
            const publisherId = document.getElementById('publisherId').value;
            const data = document.getElementById('data').value;


            fetch('/publish', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ publisher_id: publisherId, data: data })
            })
            .then(response => response.json())
            .then(data => alert('Data published successfully!'))
            .catch(error => console.error('Error:', error));
        }


        function subscribe() {
            const publisherId = document.getElementById('subscribeId').value;


            fetch(`/subscribe/${publisherId}`)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    document.getElementById('dataDisplay').innerText = data.error;
                } else {
                    document.getElementById('dataDisplay').innerText = `Data: ${data.data}`;
                }
            })
            .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>
